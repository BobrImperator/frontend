<div
  class="offering-form"
  data-test-offering-form
  {{did-insert (perform this.load) @offering @cohorts}}
  {{did-update (perform this.load) @offering @cohorts}}
>
  {{#unless this.loadData.isRunning}}
    <div class="toggle-offering-calendar">
      <ToggleButtons
        @firstLabel={{t "general.hideCalendar"}}
        @firstOptionSelected={{not this.showOfferingCalendar}}
        @secondLabel={{t "general.showCalendar"}}
        @toggle={{toggle "showOfferingCalendar" this}}
      />
    </div>
    {{#if this.showOfferingCalendar}}
      <OfferingCalendar
        @endDate={{this.endDate}}
        @learnerGroups={{this.learnerGroups}}
        @startDate={{this.startDate}}
        @session={{@session}}
      />
    {{/if}}
    <div class="form">
      <fieldset class="scheduling">
        <legend>{{t "general.scheduling"}}</legend>
        <div class="scheduling-controls">
          <div class="item start-date">
            <label>
              {{t "general.startDate"}}:
            </label>
            <DatePicker
              @value={{this.startDate}}
              @change={{this.updateStartDate}}
            />
          </div>
          <div class="item start-time">
            <label>
              {{t "general.startTime"}}:
            </label>
            <TimePicker @date={{this.startDate}} @action={{this.updateStartTime}} />
          </div>
          <div class="item offering-duration">
            <label>
              {{t "general.duration"}}:
            </label>
            <div class="duration-inputs">
              <div class="hours">
                <div class="hours-container">
                  <input
                      min="0"
                      type="number"
                      value={{this.durationHours}}
                    {{on "input" (perform this.updateDurationHours value="target.value")}}
                  >
                  {{#each (await (compute (fn this.getErrorsFor) "durationHours")) as |message|}}
                    <span class="validation-error-message">
                      {{message}}
                    </span>
                  {{/each}}
                  <label>
                    {{t "general.hours"}}
                  </label>
                </div>
              </div>
              <div class="minutes">
                <div class="minutes-container">
                  <input
                      max="59"
                      min="0"
                      type="number"
                      value={{this.durationMinutes}}
                    {{on "input" (perform this.updateDurationMinutes value="target.value")}}
                  >
                  {{#each (await (compute (fn this.getErrorsFor) "durationMinutes")) as |message|}}
                    <span class="validation-error-message">
                      {{message}}
                    </span>
                  {{/each}}
                  <label>
                    {{t "general.minutes"}}
                  </label>
                </div>
              </div>
            </div>
          </div>
          <div class="item end-date-time">
            <label>
              {{t "general.end"}}:
            </label>
            {{#if this.endDate}}
              <div class="text">
                {{format-date this.endDate month="numeric" day="numeric" year="numeric" hour="numeric" minute="numeric"}}
              </div>
            {{/if}}
          </div>
          <div class="item timezone" data-test-timezone-picker>
            <label>
              {{t "general.timezone"}}:
            </label>
            {{#if this.isEditingTimezone}}
              <div class="picker">
                <select {{on "change" (fn this.changeTimezone)}}>
                  {{#each this.timezones as |timezone|}}
                    <option value={{timezone.value}} selected={{is-equal timezone.value this.currentTimezone}}>
                      {{timezone.label}}
                    </option>
                  {{/each}}
                </select>
                <span class="actions">
                  <button
                      class="cancel"
                      title={{t "general.cancel"}}
                      type="button"
                    {{on "click" (set this.isEditingTimezone false)}}
                  >
                    <FaIcon @icon="times" />
                  </button>
                </span>
              </div>
            {{else}}
              <div
                data-test-current-timezone
                class="editable clickable current-timezone"
                role="button"
                {{on "click" (set this.isEditingTimezone true)}}
              >
                {{this.formattedCurrentTimezone}}
              </div>
            {{/if}}
          </div>

          {{#if @showMakeRecurring}}
            <div class="item make-recurring">
              <label>
                {{t "general.makeRecurring"}}:
              </label>
              <div>
                <ToggleYesno
                  @yes={{this.makeRecurring}}
                  @toggle={{set this.makeRecurring (not this.makeRecurring)}}
                />
                {{#if this.makeRecurring}}
                  <div class="make-recurring-options">
                    <div class="make-recurring-days">
                      {{#each this.recurringDayOptions as |obj i|}}
                        <div data-test-make-recurring-day>
                          <input id="make-recurring-day-input-{{i}}"
                            type="checkbox"
                            checked={{or
                              (includes obj.day this.recurringDays)
                              (eq (moment-format this.startDate "d") obj.day)
                            }}
                            disabled={{eq (moment-format this.startDate "d") obj.day}}
                            data-test-recurring-day-input={{i}}
                            {{on "click" (fn this.toggleRecurringDay obj.day)}}
                          >
                          <label
                            class="day-of-week clickable"
                            for="make-recurring-day-input-{{i}}"
                            data-test-recurring-day-label={{i}}
                          >
                            {{t obj.t}}
                          </label>
                        </div>
                      {{/each}}
                    </div>
                    <div class="make-recurring-input-container">
                      <input type="text"
                        value={{this.numberOfWeeks}}
                        class="make-recurring-input"
                        {{on "input" (fn this.changeNumberOfWeeks)}}
                        {{on "keyup" (fn this.addErrorDisplayFor "numberOfWeeks")}}
                      >
                      <label class="make-recurring-input-label">
                        {{t "general.weeks"}}
                      </label>
                      {{#each (await (compute (fn this.getErrorsFor) "numberOfWeeks")) as |message|}}
                        <span class="validation-error-message">
                          {{message}}
                        </span>
                      {{/each}}
                    </div>
                  </div>
                {{/if}}
              </div>
            </div>
          {{/if}}
          {{#if @showRoom}}
            <div class="item room">
              <label>
                {{t "general.location"}}:
                {{#unless @offering}}
                  <span class="label-description">({{t "general.defaultNotLoaded"}})</span>
                {{/unless}}
              </label>
              <input
                type="text"
                value={{this.room}}
                {{on "input" (fn this.changeRoom)}}
                {{on "keyup" (fn this.addErrorDisplayFor "room")}}
              >
              {{#each (await (compute (fn this.getErrorsFor) "room")) as |message|}}
                <span class="validation-error-message">
                  {{message}}
                </span>
              {{/each}}
            </div>
            <div class="item url" data-test-url>
              <label>
                {{t "general.virtualLearningLink"}}:
                {{#unless @offering}}
                  <span class="label-description">({{t "general.defaultNotLoaded"}})</span>
                {{/unless}}
              </label>
              {{! template-lint-disable no-bare-strings}}
              <input
                  type="text"
                  placeholder="https://example.com"
                  value={{this.bestUrl}}
                  inputmode="url"
                {{on "input" (pick "target.value" this.changeURL)}}
                {{on "keyup" (fn this.addErrorDisplayFor "url")}}
                {{on "focus" (fn this.selectAllText)}}
              >
              {{#each (await (compute (fn this.getErrorsFor) "url")) as |message|}}
                <span class="validation-error-message">
                  {{message}}
                </span>
              {{/each}}
            </div>
          {{/if}}
        </div>
      </fieldset>
      {{#if @showInstructors}}
        <fieldset class="instructor-management">
          <legend>{{t "general.instructorsAndInstructorGroups"}}</legend>
          <div class="instructor-management-controls">
            <div class="item instructors">
              <label>
                {{t "general.selectedInstructors"}}:
                {{#unless @offering}}
                  <span class="label-description">({{t "general.defaultNotLoaded"}})</span>
                {{/unless}}
              </label>
              {{#if (get (await this.instructors) "length")}}
                <ul class="instructors-list" data-test-instructors>
                  {{#each (sort-by "fullName" (await this.instructors)) as |user|}}
                    <li role="button" {{on "click" (fn this.removeInstructor user)}}>
                      <UserNameInfo @user={{user}} />
                      <FaIcon @icon="times" class="remove" />
                    </li>
                  {{/each}}
                </ul>
              {{else}}
                <div>{{t "general.none"}}</div>
              {{/if}}
            </div>
            <div class="item instructor-groups">
              <label>
                {{t "general.selectedInstructorGroups"}}:
                {{#unless @offering}}
                  <span class="label-description">({{t "general.defaultNotLoaded"}})</span>
                {{/unless}}
              </label>
              <div data-test-instructor-groups>
                {{#each (sort-by "title" (await this.instructorGroups)) as |instructorGroup|}}
                  <div class="instructor-group" data-test-instructor-group>
                    <span
                      role="button"
                      data-test-instructor-group-title
                      {{on "click" (fn this.removeInstructorGroup instructorGroup)}}
                    >
                      <FaIcon @icon="users" />
                      {{instructorGroup.title}}
                      <FaIcon @icon="times" class="remove" />
                    </span>
                    <br>
                    <ul class="instructorgroup-members-list" data-test-instructor-group-members>
                      {{#each (sort-by "fullName" (await instructorGroup.users)) as |user|}}
                        <li>
                          <UserNameInfo @user={{user}} />
                        </li>
                      {{/each}}
                    </ul>
                  </div>
                {{else}}
                  <div>{{t "general.none"}}</div>
                {{/each}}
              </div>
            </div>
            <div class="item instructor-search">
              <label>{{t "general.search"}}:</label>
              <UserSearch
                @addUser={{this.addInstructor}}
                @addInstructorGroup={{this.addInstructorGroup}}
                @currentlyActiveUsers={{this.instructors}}
                @placeholder={{t "general.findInstructorOrGroup"}}
                @availableInstructorGroups={{await this.availableInstructorGroups}}
                @currentlyActiveInstructorGroups={{this.instructorGroups}}
              />
            </div>
          </div>
        </fieldset>
      {{/if}}
      <fieldset class="learner-management">
        <legend>{{t "general.learnersAndLearnerGroups"}}</legend>
        <div class="learner-management-controls">
          <div class="selected-learner-groups item">
            <label>
              {{t "general.selectedLearnerGroups"}}:
            </label>
            {{#if this.learnerGroups.length}}
              <DetailLearnergroupsList
                @learnerGroups={{this.learnerGroups}}
                @isManaging={{true}}
                @remove={{this.removeLearnerGroup}}
              />
            {{else}}
              <p data-test-no-selected-learnergroups>
                {{t "general.none"}}
              </p>
            {{/if}}
          </div>
          {{#if @cohorts.length}}
            <div class="available-learner-groups item" data-test-available-learner-groups>
              <label>
                {{t "general.availableLearnerGroups"}}:
                {{#unless (and (is-fulfilled this.allLearnerGroups) (is-fulfilled @cohorts))}}
                  <LoadingSpinner />
                {{/unless}}
              </label>
              <SearchBox
                @search={{fn (mut this.learnerGroupsFilter)}}
                placeholder={{t "general.filterPlaceholder"}}
              />
              <div class="cohorts-container">
                {{#each (sort-by "title" (await @cohorts)) as |cohort|}}
                  <div class="cohort-learner-groups" data-test-cohorts>
                    {{#if
                      (and
                        (is-fulfilled cohort.programYear)
                        (is-fulfilled cohort.programYear.program)
                        (is-fulfilled cohort.rootLevelLearnerGroups)
                      )
                    }}
                      <h5 class="cohort-title" data-test-title>
                        {{cohort.programYear.program.title}}
                        {{cohort.title}}
                      </h5>
                      <ul class="tree-groups-list" data-test-tree-groups-list>
                        {{#each
                          (sort-by
                            "title" (await cohort.rootLevelLearnerGroups)
                          ) as |learnerGroup|
                        }}
                          <LearnergroupTree
                            @learnerGroup={{learnerGroup}}
                            @selectedGroups={{this.learnerGroups}}
                            @filter={{this.learnerGroupsFilter}}
                            @add={{this.addLearnerGroup}}
                          />
                        {{/each}}
                      </ul>
                    {{else}}
                      <LoadingSpinner />
                    {{/if}}
                  </div>
                {{/each}}
              </div>
            </div>
          {{else}}
            <p>
              {{t "general.noAvailableLearnerGroups"}}
            </p>
          {{/if}}
          {{#each (await (compute (fn this.getErrorsFor) "learnerGroups")) as |message|}}
            <p class="validation-error-message">
              {{message}}
            </p>
          {{/each}}
        </div>
        {{#unless @smallGroupMode}}
          <div class="selected-learners item">
            <label>
              {{t "general.selectedLearners"}}:
            </label>
            {{#if this.learners.length}}
              <DetailLearnerList
                @learners={{this.learners}}
                @isManaging={{true}}
                @remove={{this.removeLearner}}
              />
            {{else}}
              <p data-test-no-selected-learners>
                {{t "general.none"}}
              </p>
            {{/if}}
          </div>
          <div class="learner-search item">
            <label>{{t "general.search"}}:</label>
            <UserSearch
              @addUser={{this.addLearner}}
              @currentlyActiveUsers={{this.learners}}
              @placeholder={{t "general.findLearners"}}
            />
          </div>
        {{/unless}}
      </fieldset>
      <div class="buttons">
        <SaveButton
          class="done text"
          @isSaving={{this.saveOffering.isRunning}}
          @saveProgressPercent={{this.saveProgressPercent}}
          {{on "click" (perform this.saveOffering)}}
        >
          {{t "general.save"}}
        </SaveButton>
        <button
          class="cancel text"
          type="button"
          disabled={{this.saveOffering.isRunning}}
          {{on "click" @close}}
        >
          {{t "general.cancel"}}
        </button>
      </div>
    </div>
  {{/unless}}
</div>
