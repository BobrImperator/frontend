<div
  class="offering-form"
  data-test-offering-form
  {{did-insert (perform this.load) @offering @cohorts @scrollToBottom}}
  {{did-update (perform this.load) @offering @cohorts @scrollToBottom}}
>
  {{#unless this.loadData.isRunning}}
    <div class="toggle-offering-calendar">
      <ToggleButtons
        @firstLabel={{t "general.hideCalendar"}}
        @firstOptionSelected={{not this.showOfferingCalendar}}
        @secondLabel={{t "general.showCalendar"}}
        @toggle={{toggle "showOfferingCalendar" this}}
      />
    </div>
    {{#if this.showOfferingCalendar}}
      <OfferingCalendar
        @endDate={{this.endDate}}
        @learnerGroups={{this.learnerGroups}}
        @startDate={{this.startDate}}
        @session={{@session}}
      />
    {{/if}}
    <div class="form">
      <div class="item start-date">
        <label>
          {{t "general.startDate"}}:
        </label>
        <DatePicker
          @value={{this.startDate}}
          @change={{this.updateStartDate}}
        />
      </div>
      <div class="item start-time">
        <label>
          {{t "general.startTime"}}:
        </label>
        {{#unless this.isEditingTimezone}}
          <div
            data-test-current-timezone
            class="editable clickable current-timezone"
            role="button"
            {{on "click" (set this.isEditingTimezone true)}}
          >
            {{this.formattedCurrentTimezone}}
          </div>
        {{/unless}}
        <TimePicker @date={{this.startDate}} @action={{this.updateStartTime}} />
      </div>
      <div class="item timezone" data-test-timezone-picker>
        {{#if this.isEditingTimezone}}
          <label>
            {{t "general.timezone"}}:
          </label>
          <span class="picker">
            <select {{on "change" (fn this.changeTimezone)}}>
              {{#each this.timezones as |timezone|}}
                <option value={{timezone.value}} selected={{is-equal timezone.value this.currentTimezone}}>
                  {{timezone.label}}
                </option>
              {{/each}}
            </select>
            <span class="actions">
              <button
                class="cancel"
                title={{t "general.cancel"}}
                type="button"
                {{on "click" (set this.isEditingTimezone false)}}
              >
                <FaIcon @icon="times" />
              </button>
            </span>
          </span>
        {{/if}}
      </div>
      <div class="item offering-duration">
        <label>
          {{t "general.duration"}}:
        </label>
        <div class="duration-inputs">
          <div class="hours">
            <div class="hours-container">
              <input
                min="0"
                type="number"
                value={{this.durationHours}}
                {{on "input" (perform this.updateDurationHours value="target.value")}}
              >
              {{#each (await (compute (fn this.getErrorsFor) "durationHours")) as |message|}}
                <span class="validation-error-message">
                  {{message}}
                </span>
              {{/each}}
              <label>
                {{t "general.hours"}}
              </label>
            </div>
          </div>
          <div class="minutes">
            <div class="minutes-container">
              <input
                max="59"
                min="0"
                type="number"
                value={{this.durationMinutes}}
                {{on "input" (perform this.updateDurationMinutes value="target.value")}}
              >
              {{#each (await (compute (fn this.getErrorsFor) "durationMinutes")) as |message|}}
                <span class="validation-error-message">
                  {{message}}
                </span>
              {{/each}}
              <label>
                {{t "general.minutes"}}
              </label>
            </div>
          </div>
        </div>
      </div>
      <div class="item end-date-time">
        <label>
          {{t "general.end"}}:
        </label>
        {{#if this.endDate}}
          <div class="text">
            {{moment-format this.endDate "M/D/YYYY h:mm a"}}
          </div>
        {{/if}}
      </div>
      {{#if @showMakeRecurring}}
        <div class="item make-recurring">
          <label>
            {{t "general.makeRecurring"}}
          </label>
          <ToggleYesno
            @yes={{this.makeRecurring}}
            @toggle={{set this.makeRecurring (not this.makeRecurring)}}
          />
          {{#if this.makeRecurring}}
            <div class="make-recurring-options">
              <div class="make-recurring-days">
                {{#each this.recurringDayOptions as |obj i|}}
                  <div data-test-make-recurring-day>
                    <input id="make-recurring-day-input-{{i}}"
                      type="checkbox"
                      checked={{or
                        (includes obj.day this.recurringDays)
                        (eq (moment-format this.startDate "d") obj.day)
                      }}
                      disabled={{eq (moment-format this.startDate "d") obj.day}}
                      data-test-recurring-day-input={{i}}
                      {{on "click" (fn this.toggleRecurringDay obj.day)}}
                    >
                    <label
                      class="day-of-week clickable"
                      for="make-recurring-day-input-{{i}}"
                      data-test-recurring-day-label={{i}}
                    >
                      {{t obj.t}}
                    </label>
                  </div>
                {{/each}}
              </div>
              <div class="make-recurring-input-container">
                <input type="text"
                  value={{this.numberOfWeeks}}
                  class="make-recurring-input"
                  {{on "input" (fn this.changeNumberOfWeeks)}}
                  {{on "keyup" (fn this.addErrorDisplayFor "numberOfWeeks")}}
                >
                <label class="make-recurring-input-label">
                  {{t "general.weeks"}}
                </label>
                {{#each (await (compute (fn this.getErrorsFor) "numberOfWeeks")) as |message|}}
                  <span class="validation-error-message">
                    {{message}}
                  </span>
                {{/each}}
              </div>
            </div>
          {{/if}}
        </div>
      {{/if}}
      {{#if @showRoom}}
        <div class="item room">
          <label>
            {{t "general.location"}}:
            {{#unless @offering}}
              {{t "general.defaultLocationNotLoaded"}}
            {{/unless}}
          </label>
          <input
            type="text"
            value={{this.room}}
            {{on "input" (fn this.changeRoom)}}
            {{on "keyup" (fn this.addErrorDisplayFor "room")}}
          >
          {{#each (await (compute (fn this.getErrorsFor) "room")) as |message|}}
            <span class="validation-error-message">
              {{message}}
            </span>
          {{/each}}
        </div>
        <div class="item url" data-test-url>
          <label>
            {{t "general.url"}}:
          </label>
          {{! template-lint-disable no-bare-strings}}
          <input
            type="text"
            placeholder="https://example.com"
            value={{this.bestUrl}}
            inputmode="url"
            {{on "input" (pick "target.value" this.changeURL)}}
            {{on "keyup" (fn this.addErrorDisplayFor "url")}}
            {{on "focus" (fn this.selectAllText)}}
          >
          {{#each (await (compute (fn this.getErrorsFor) "url")) as |message|}}
            <span class="validation-error-message">
              {{message}}
            </span>
          {{/each}}
        </div>
      {{/if}}
      {{#if @showInstructors}}
        <div class="instructors item">
          <label>
            {{t "general.instructors"}}:
            {{#unless @offering}}
              {{t "general.defaultInstructorsNotLoaded"}}
            {{/unless}}
          </label>
          <InstructorSelectionManager
            @addInstructor={{this.addInstructor}}
            @addInstructorGroup={{this.addInstructorGroup}}
            @removeInstructor={{this.removeInstructor}}
            @removeInstructorGroup={{this.removeInstructorGroup}}
            @availableInstructorGroups={{this.availableInstructorGroups}}
            @instructorGroups={{this.instructorGroups}}
            @instructors={{this.instructors}}
          />
        </div>
      {{/if}}
      {{#unless @smallGroupMode}}
        <div class="learners item">
          <label>
            {{t "general.learners"}}:
          </label>
            <LearnerSelectionManager
              @learners={{this.learners}}
              @add={{this.addLearner}}
              @remove={{this.removeLearner}}
            />
        </div>
      {{/unless}}
      <div class="learner-groups item">
        <label>
          {{t "general.learnerGroups"}}:
        </label>
        {{#if @cohorts.length}}
          <LearnergroupSelectionManager
            @learnerGroups={{this.learnerGroups}}
            @cohorts={{@cohorts}}
            @add={{this.addLearnerGroup}}
            @remove={{this.removeLearnerGroup}}
          />
        {{else}}
          <p>
            {{t "general.noAvailableLearnerGroups"}}
          </p>
        {{/if}}
        {{#each (await (compute (fn this.getErrorsFor) "learnerGroups")) as |message|}}
          <p class="validation-error-message">
            {{message}}
          </p>
        {{/each}}
      </div>
      <div class="buttons" {{did-insert (set this.scrollTo)}}>
        <SaveButton
          class="done text"
          @isSaving={{this.saveOffering.isRunning}}
          @saveProgressPercent={{this.saveProgressPercent}}
          {{on "click" (perform this.saveOffering)}}
        >
          {{t "general.save"}}
        </SaveButton>
        <button
          class="cancel text"
          type="button"
          disabled={{this.saveOffering.isRunning}}
          {{on "click" @close}}
        >
          {{t "general.cancel"}}
        </button>
      </div>
    </div>
  {{/unless}}
</div>
